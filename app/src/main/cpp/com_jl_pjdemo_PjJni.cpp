/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_jl_pjdemo_PjJni */
#include "com_jl_pjdemo_PjJni.h"
#include "pjwrapper.h"
#include <pjlib.h>
#include <string>
#include <iostream>

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_jl_pjdemo_PjJni
 * Method:    init
 * Signature: (Lcom/jl/pjdemo/PjCb;)I
 */
JNIEXPORT jint JNICALL Java_com_jl_pjdemo_PjJni_init
        (JNIEnv *, jobject, jobject) {
    return pjwrapper_init();
}

/*
 * Class:     com_jl_pjdemo_PjJni
 * Method:    uninit
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_jl_pjdemo_PjJni_uninit
        (JNIEnv *, jobject) {
    return pjwrapper_uninit();
}

/*
 * Class:     com_jl_pjdemo_PjJni
 * Method:    start
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_jl_pjdemo_PjJni_start
        (JNIEnv *, jobject, jstring, jint) {
    return pjwrapper_start();
}

/*
 * Class:     com_jl_pjdemo_PjJni
 * Method:    stop
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_jl_pjdemo_PjJni_stop
        (JNIEnv *, jobject) {
    return pjwrapper_stop();
}

/*
 * Class:     com_jl_pjdemo_PjJni
 * Method:    version
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_jl_pjdemo_PjJni_version
        (JNIEnv *env, jobject obj) {
    int random = pj_rand();
    std::string version = "version:" + std::to_string(random);
    return env->NewStringUTF(version.c_str());
}

#ifdef __cplusplus
}
#endif
